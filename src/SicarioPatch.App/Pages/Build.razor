@page "/build"
@inject IConfiguration _configuration
@inject IMediator Mediator
@inject IJSRuntime JsRuntime
@inject IBrandProvider Brand
@* @attribute [Authorize(Policy = Policies.IsUser)] *@
<h3>
    Merge @Brand.AppName
    <Button Class="context-btn" Clicked="() => _modalRef?.Show() ?? throw new InvalidOperationException()">
        <Icon Name="IconName.QuestionCircle"/>
    </Button>
</h3>
@if (AvailableMods.Any())
{
    <AuthorizeView>
        <NotAuthorized>
            <Alert Color="Color.Warning" Visible="true">
                <CloseButton/>
                <Paragraph Style="margin-bottom: 0;">
                    Only authenticated users can build merged mods! All users can download presets for use with @Brand.ToolName()
                    <Button Type="ButtonType.Link" style="vertical-align: middle; margin-left: 1.5em; background-color: #714cfe" Color="Color.Dark" To="/Login">Log In with Discord</Button>
                    <Button Type="ButtonType.Link" style="vertical-align: middle; margin-left: 0.5em;" Color="Color.Secondary" To="/merger">More Info</Button>
                </Paragraph>
            </Alert>
        </NotAuthorized>
    </AuthorizeView>
    <Row>
        <Column ColumnSize="ColumnSize.Is6.OnFullHD.Is12.OnWidescreen">
            <div class="mod-selection" style="max-height: 60vh;">
                <ModSelection AvailableMods="@AvailableMods.Values" OnModDisabled="@(mf => SortedMods.Remove(mf))" OnModEnabled="@((mf) => SortedMods.Add(mf))"/>
            </div>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.OnFullHD.Is12.OnWidescreen">
            <div class="mod-params" style="max-height: 60vh;">
                <ParameterList Mods="@SortedMods" InputParameters="@InputParameters"/>
            </div>
        </Column>
    </Row>
    <Row>
        @if (SortedMods.Any())
        {
            <Column ColumnSize="ColumnSize.Is6.OnFullHD.Is8.OnWidescreen.Is12.OnTablet">
                <Card>
                    <CardHeader>Enabled Mods</CardHeader>
                    <CardBody Style="max-height: 60vh;">
                        <CardText>
                            You have enabled @SortedMods.Count mods to modify @GetEnabledFileCount files.
                            <ModOrder @ref="_loadOrder" Order="SortedMods"></ModOrder>
                        </CardText>
                    </CardBody>
                </Card>
            </Column>
        }


        @if (ReadyToBuild)
        {
            <Column ColumnSize="ColumnSize.Is4.Is2.WithOffset.OnFullHD.Is4.OnWidescreen.Is12.OnTablet">
                <BuildAction SkipTerms="@_skipTerms" BuildParameters="@InputParameters" Mods="@SortedMods" RequireAuth="@true"/>
            </Column>
        }
    </Row>
}
else
{
    <Row Gutter=(32,16)>
        <Column ColumnSize="ColumnSize.Is8.Is2.WithOffset">
            <Container Style="margin-top: 1.5em;">
                <Alert Color="Color.Primary" Visible="true">
                    There are no mods currently available!
                </Alert>
            </Container>
        </Column>
    </Row>
}
<Modal @ref="_modalRef">
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>How to build a @Brand.ShortName merge</ModalTitle>
            <CloseButton Clicked="() => _modalRef?.Hide() ?? throw new InvalidOperationException()"/>
        </ModalHeader>
        <ModalBody>
            <Alert Color="Color.Danger" Visible="true">Only signed in users can build merged mods!</Alert>
            <HowtoGuide Title=""/>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@(() => _modalRef?.Hide() ?? throw new InvalidOperationException())">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Dictionary<string, WingmanMod> AvailableMods { get; set; } = new();

    private List<WingmanMod> SortedMods { get; set; } = new();

    private SafeDictionary<string, string> InputParameters { get; set; } = new(string.Empty);

    [CascadingParameter(Name = "SnackbarStack")]
    SnackbarStack? SnackbarStack { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState?>? AuthenticationStateTask { get; set; }

    private ModOrder? _loadOrder;

    private Modal? _modalRef;
    private bool _skipTerms;

    private bool ReadyToBuild => SortedMods.Any();

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateTask == null) return;

        var state = await AuthenticationStateTask;
        if (state?.User.Identity?.Name != null)
        {
            AvailableMods = await Mediator.Send(new ModsRequest { IncludePrivate = true, UserName = state.User.Identity.Name });
        }
        else
        {
            AvailableMods = await Mediator.Send(new ModsRequest());
        }
        _skipTerms = _configuration.GetValue<bool>("SkipTerms");
    }

    private int GetEnabledFileCount => SortedMods.ToFileCount();

}