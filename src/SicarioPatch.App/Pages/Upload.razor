@page "/upload"
@using System.IO
@using SicarioPatch.App.Infrastructure
@inject IMediator Mediator
@inject IConfiguration Configuration
@inject BrandProvider Brand
@attribute [Authorize(Policy = Policies.IsUploader)]
<h3>Upload Patch Mod</h3>

<Row>
    <Column>
        @if (!_uploadPublic)
        {
            <div role="alert" class="alert alert-primary">
                <h6 class="text-secondary">
                    All uploaded mods are private by default!
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </h6>
                <p>
                    You will need to contact @Brand.OwnerName to make your mod available for other users.
                </p>
            </div>
        }
        <UploadMod OnSaveMod="@OnSaveMod"/>
    </Column>
    <Column ColumnSize="ColumnSize.IsAuto">
        <UserMods Title="Your Mods" OnRemoveMod="@OnDeleteMod"/>
    </Column>
</Row>


@code {

    [CascadingParameter]
    private Task<AuthenticationState?>? AuthenticationStateTask { get; set; }

    [CascadingParameter(Name = "SnackbarStack")]
    SnackbarStack? SnackbarStack { get; set; }

    protected override Task OnInitializedAsync()
    {
    // await RefreshMods();
        var uploadPublic = Configuration.GetValue("UploadPublic", false);
        _uploadPublic = uploadPublic;
        return Task.CompletedTask;
    }

    private async Task OnSaveMod((string fileName, WingmanMod mod) evt)
    {
        if (AuthenticationStateTask == null) return;

        var state = await AuthenticationStateTask;
        if (state?.User != null)
        {
            if (evt.mod.Metadata != null) evt.mod.Metadata.Author = state.User.Identity?.Name;

            evt.mod.ModInfo.Private = !_uploadPublic;
            var req = new ModUploadRequest { Mod = evt.mod, FileName = evt.fileName };
            try
            {
                Console.WriteLine("Sending upload request");
                var result = await Mediator.Send(req);
                if (!string.IsNullOrWhiteSpace(result))
                {
                    SnackbarStack?.PushAsync($"Successfully uploaded '{Path.GetFileNameWithoutExtension(result)}'", SnackbarColor.Success);
                }
                else
                {
                    SnackbarStack?.PushAsync($"Error during upload! Please contact {Brand.OwnerName} to fix your upload", SnackbarColor.Warning);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                SnackbarStack?.PushAsync($"Error encountered during upload!{Environment.NewLine}{e}", SnackbarColor.Danger);
            }
        }
        else
        {
            SnackbarStack?.PushAsync("Failed to determine user information!", SnackbarColor.Danger);
        }
    }

    private async Task OnDeleteMod(string fileName)
    {
        var req = new ModDeleteRequest { FileName = Path.GetFileName(fileName) };
        var result = await Mediator.Send(req);
        SnackbarStack?.PushAsync(
            result ? $"Successfully deleted '{fileName}'" : "Failed to delete mod file",
            result ? SnackbarColor.Success : SnackbarColor.Danger);
    }

    private bool _uploadPublic;
}