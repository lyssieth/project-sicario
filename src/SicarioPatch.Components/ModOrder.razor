<ul class="list-group" style="max-height: inherit; box-sizing: border-box">
    @foreach (var enabledMod in _mods)
    {
        <li class="list-group-item d-flex justify-content-between align-items-center">
            <span>
                @enabledMod.GetLabel()
                @if (enabledMod?.ModInfo?.CanOverwrite == true)
                {
                    <FadeTooltip Text="This mod might overwrite other mods in your selection, regardless of order">
                        <Icon Name="IconName.ExclamationTriangle"/>
                    </FadeTooltip>
                }
                @if (enabledMod.FilePatches.Any())
                {
                    <FadeTooltip Text="This mod uses the legacy method of directly hex patching game files. Use with caution.">
                        <Icon Name="IconName.ExclamationCircle"/>
                    </FadeTooltip>
                }
            </span>
            <Tooltip Text="Use the priority to fine-tune the order your mods are applied" Placement="TooltipPlacement.Left">
                <Buttons>
                    <Button Color="Color.Light" Clicked="() => OnChangePriority(enabledMod, true)">
                        <Icon Name="IconName.AngleUp"/>
                    </Button>
                    @* <Button Style="min-width: 48px;" Disabled="true" Color="Color.Dark"><Text Class="text-muted">@ModPriority[enabledFile]</Text></Button> *@
                    <Button Color="Color.Light" Clicked="() => OnChangePriority(enabledMod, false)">
                        <Icon Name="IconName.AngleDown"/>
                    </Button>
                </Buttons>
            </Tooltip>
        </li>
    }
</ul>

@code {

    [Parameter]
    public EventCallback<List<WingmanMod>> OrderChanged { get; set; }

    [Parameter]
    public List<WingmanMod> Order
    {
        get => _mods;
        set
        {
            if (_mods == value) return;
            _mods = value;
            OrderChanged.InvokeAsync(value);
        }
    }

    //private Dictionary<WingmanMod, int> _order { get; set; }

    private List<WingmanMod> _mods { get; set; } = new();

    private void OnChangePriority(WingmanMod mod, bool decrement)
    {
        if (decrement)
        {
            _mods.Move(mod, _mods.IndexOf(mod) - 1);
        }
        else
        {
            _mods.Move(mod, _mods.IndexOf(mod) + 1);
        }
    /*var existingPriority = _order[mod];
        if (decrement)
        {
            existingPriority--;
        }
        else
        {
            existingPriority++;
        }
        _order[mod] = existingPriority;*/
        StateHasChanged();
    }

}